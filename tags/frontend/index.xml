<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frontend | Dylan Powers</title>
    <link>https://dylandpowers.github.io/tags/frontend/</link>
      <atom:link href="https://dylandpowers.github.io/tags/frontend/index.xml" rel="self" type="application/rss+xml" />
    <description>Frontend</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 08 Aug 2021 16:20:12 -0400</lastBuildDate>
    <image>
      <url>https://dylandpowers.github.io/img/icon-192.png</url>
      <title>Frontend</title>
      <link>https://dylandpowers.github.io/tags/frontend/</link>
    </image>
    
    <item>
      <title>Essential NPM Packages for React Beginners</title>
      <link>https://dylandpowers.github.io/post/essential-npm-packages-for-react-beginners/</link>
      <pubDate>Sun, 08 Aug 2021 16:20:12 -0400</pubDate>
      <guid>https://dylandpowers.github.io/post/essential-npm-packages-for-react-beginners/</guid>
      <description>

&lt;p&gt;When I was first starting out in React development, I had little to no knowledge about the ecosystem in general. Not knowing the necessary tools available in the ecosystem definitely led to increased time-to-completion for personal projects. In this post, I&amp;rsquo;ll discuss NPM packages that I use every day in my personal React projects which have sped up development time drastically, and are great for beginners.&lt;/p&gt;

&lt;h1 id=&#34;create-react-app-https-www-npmjs-com-package-create-react-app&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/create-react-app&#34; target=&#34;_blank&#34;&gt;create-react-app&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;This is the #1 package out there for bootstrapping React applications. It allows you to create scaffolds for React applications with a simple command: &lt;code&gt;create-react-app &amp;lt;project name&amp;gt;&lt;/code&gt;. This package is maintained by Facebook, so you can be sure that it will always contain the most recent optimizations.&lt;/p&gt;

&lt;h1 id=&#34;antd-https-www-npmjs-com-package-antd&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/antd&#34; target=&#34;_blank&#34;&gt;antd&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;antd&lt;/code&gt; package, short for Ant Design, is a library of React components created by &lt;a href=&#34;https://www.antgroup.com/en&#34; target=&#34;_blank&#34;&gt;Ant Financial&lt;/a&gt;. Creating UI components can be an extremely time consuming part of development, and self-created components don&amp;rsquo;t make for a great user experience if you don&amp;rsquo;t have great design skills (like myself).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;antd&lt;/code&gt; provides simple, out-of-the-box components for everything from lists to tables to rating systems. Everything is standardized which makes for a &lt;em&gt;great&lt;/em&gt; user experience, and you can even override the CSS variables using something like &lt;a href=&#34;https://www.npmjs.com/package/craco&#34; target=&#34;_blank&#34;&gt;craco&lt;/a&gt;. I&amp;rsquo;ve made several websites with &lt;code&gt;antd&lt;/code&gt; components and I always have a great time using it.&lt;/p&gt;

&lt;h1 id=&#34;styled-components-https-styled-components-com&#34;&gt;&lt;a href=&#34;https://styled-components.com/&#34; target=&#34;_blank&#34;&gt;styled-components&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a library for styling React components (or standard HTML elements) directly in your component file. By default, it exports a function &lt;code&gt;styled&lt;/code&gt; which accepts a React component as an argument and applies extra styling on top of it. For example, we can add extra styles to &lt;code&gt;antd&lt;/code&gt;&amp;rsquo;s &lt;code&gt;Button&lt;/code&gt; component like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Button } from &#39;antd&#39;;
import styled from &#39;styled-components&#39;;

const PaddedButton = styled(Button)`
  padding: 10px;
`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a short-hand for applying the styling on HTML elements where you can just use a &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import styled from &#39;styled-components&#39;;

const RedText = styled.p`
  color: red;
`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love &lt;code&gt;styled-components&lt;/code&gt; because I can style the components in the way I need without ever leaving the component file. In my opinion, the close coupling of component&amp;rsquo;s styles to their state management makes for a simpler development workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; be sure to always define your styled components &lt;em&gt;outside&lt;/em&gt; of the component that uses them, so that they aren&amp;rsquo;t re-computed on every render.&lt;/p&gt;

&lt;h1 id=&#34;react-router-dom-https-reactrouter-com&#34;&gt;&lt;a href=&#34;https://reactrouter.com/&#34; target=&#34;_blank&#34;&gt;react-router-dom&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;This is simply the easiest and best routing package out there. It gives you a set of navigational components that you can use to declare different routes in your application like the main page, a &lt;code&gt;/login&lt;/code&gt; page, a &lt;code&gt;/profile&lt;/code&gt; page, etc. You declare your different routes with &lt;code&gt;Route&lt;/code&gt; components, and then designate which component they should render:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Route, Switch, Router } from &#39;react-router-dom&#39;;
import LoginPage from &#39;./LoginPage&#39;;

export default function App(props) {
  return (
    &amp;lt;Router&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route exact path=&amp;quot;/login&amp;quot; component={LoginPage} /&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/Router&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve also written &lt;a href=&#34;https://dylanpowers.me/post/protected-routes-in-react/&#34; target=&#34;_blank&#34;&gt;separate post&lt;/a&gt; on how to make protected routes using this package.&lt;/p&gt;

&lt;h1 id=&#34;firebase-https-www-npmjs-com-package-firebase&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/firebase&#34; target=&#34;_blank&#34;&gt;firebase&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Firebase is more just than a package - it provides tools for everything that basic applications need like authentication, storage, and much more. It provides a declarative and simple API that makes app development incredibly simple.&lt;/p&gt;

&lt;p&gt;To use this package, you&amp;rsquo;ll need to create a firebase account and project. After that, you can set up authentication as well as a real-time datastore or a collection-like datastore similar to &lt;a href=&#34;https://www.mongodb.com/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;axios-https-www-npmjs-com-package-axios&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/axios&#34; target=&#34;_blank&#34;&gt;axios&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Axios is a simple HTTP client for making API requests from the browser. It&amp;rsquo;s also promise-based which means you can add success callbacks with ease.&lt;/p&gt;

&lt;h1 id=&#34;classnames-https-www-npmjs-com-package-classnames&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/classnames&#34; target=&#34;_blank&#34;&gt;classnames&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Classnames is an incredible simple yet extremely powerful library. It does one thing and it does it well - conditionally combining CSS class names based on a set of criteria. It exports a function which takes a single object argument where the keys are the class names and the values are booleans representing whether or not to apply the class name. Here&amp;rsquo;s a simple example where something should have the &lt;code&gt;highlighted&lt;/code&gt; class if a piece of state is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import classNames from &#39;classnames&#39;;

export default function List(props) {
  const [isHighlighted, setIsHighlighted] = useState(false);

  const listItemClassName = classNames({
    &#39;list-item&#39;: true,
    &#39;highlighted&#39;: isHighlighted
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;With these packages, you can supercharge your React development. Go out and develop!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Context to Prevent Unnecessary Re Renders</title>
      <link>https://dylandpowers.github.io/post/using-context-to-prevent-unnecessary-re-renders/</link>
      <pubDate>Sun, 09 May 2021 22:49:47 -0400</pubDate>
      <guid>https://dylandpowers.github.io/post/using-context-to-prevent-unnecessary-re-renders/</guid>
      <description>

&lt;p&gt;With the rising popularity of React, we are in an era of the most responsive user interfaces we have ever seen. React uses a virtual DOM, and for every render it runs calculations to determine which parts of the actual DOM need to get updated. This means that React &lt;em&gt;only re-renders&lt;/em&gt; components that need to be re-rendered, and nothing more.&lt;/p&gt;

&lt;p&gt;However, that doesn&amp;rsquo;t mean we shouldn&amp;rsquo;t introduce optimizations of our own! Too many re-renders can lead to performance issues, so we should optimize wherever we can. One common pitfall I see in React applications is what I call &lt;em&gt;messenger components&lt;/em&gt;, which are components that pass some props from a parent to a child, but do not actually do anything with those props. For example, consider the following three components.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Parent(props) {
  const foo = 1;
  const bar = 2;

  return (
    &amp;lt;Child foo={foo} bar={bar} /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Child(props) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;Foo is {props.foo}&amp;lt;/p&amp;gt;
      &amp;lt;Grandchild bar={props.bar} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Grandchild(props) {
  return (
    &amp;lt;p&amp;gt;Bar is {props.bar}&amp;lt;/p&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this situation, &lt;code&gt;Child&lt;/code&gt; receives both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; as props, but only truly &amp;ldquo;cares&amp;rdquo; about the value of &lt;code&gt;foo&lt;/code&gt;; &lt;code&gt;Grandchild&lt;/code&gt; cares about the value of &lt;code&gt;bar&lt;/code&gt;. In this case, &lt;code&gt;Child&lt;/code&gt; is a messenger component for the &lt;code&gt;bar&lt;/code&gt; prop. &lt;code&gt;Child&lt;/code&gt; should only re-render when the value of &lt;code&gt;foo&lt;/code&gt; updates, but in this case it will also re-render when &lt;code&gt;bar&lt;/code&gt; updates. How can we fix this?&lt;/p&gt;

&lt;h1 id=&#34;the-context-api&#34;&gt;The Context API&lt;/h1&gt;

&lt;p&gt;Using React&amp;rsquo;s &lt;a href=&#34;https://reactjs.org/docs/context.html&#34; target=&#34;_blank&#34;&gt;Context API&lt;/a&gt;, we can broadcast changes to values, and only components that directly subscribe to that piece of context will receive the new value. This solves the problem of messenger components re-rendering unnecessarily, because we no longer need to pass props down - we can simply directly subscribe to the value in &lt;code&gt;Grandchild&lt;/code&gt;. To demonstrate this, I will add &lt;a href=&#34;https://reactjs.org/docs/glossary.html#refs&#34; target=&#34;_blank&#34;&gt;refs&lt;/a&gt; to show the number of re-renders for each component before and after adding context.&lt;/p&gt;

&lt;h1 id=&#34;before&#34;&gt;Before&lt;/h1&gt;

&lt;p&gt;Using the current system of prop drilling, we can see how &lt;code&gt;Child&lt;/code&gt; will re-render every time either prop is updated. If you like, use &lt;a href=&#34;https://github.com/facebook/create-react-app&#34; target=&#34;_blank&#34;&gt;create-react-app&lt;/a&gt; to bootstrap an app to see the renders in action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Parent(props) {
  const [foo, setFoo] = useState(0);
  const [bar, setBar] = useState(0);

  function incrementFoo() {
    setFoo((prev) =&amp;gt; prev + 1);
  }

  function incrementBar() {
    setBar((prev) =&amp;gt; prev + 1);
  }

  return (
    &amp;lt;&amp;gt;
      &amp;lt;button onClick={incrementFoo}&amp;gt;Increment Foo&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={incrementBar}&amp;gt;Increment Bar&amp;lt;/button&amp;gt;
      &amp;lt;Child foo={foo} bar={bar} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Child(props) {
  const renders = useRef(0);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;Foo (in Child): {props.foo}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Child renders: {renders.current++}&amp;lt;/p&amp;gt;
      &amp;lt;Grandchild bar={bar} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Grandchild(props) {
  const renders = useRef(0);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;Bar (in Grandchild): {props.bar}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Grandchild renders: {renders.current++}&amp;lt;/p&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this application, you will notice that the number of renders for the &lt;code&gt;Child&lt;/code&gt; and &lt;code&gt;Grandchild&lt;/code&gt; components will always be the same. However, since &lt;code&gt;Child&lt;/code&gt; doesn&amp;rsquo;t need to update when &lt;code&gt;bar&lt;/code&gt; updates, the number of re-renders shouldn&amp;rsquo;t be the same for the two components.&lt;/p&gt;

&lt;p&gt;But wait, why don&amp;rsquo;t we just memoize &lt;code&gt;Child&lt;/code&gt; so that it only re-renders when &lt;code&gt;foo&lt;/code&gt; updates? Beware of this approach, because it is only half of the solution! Memoizing &lt;code&gt;Child&lt;/code&gt; to not re-render when &lt;code&gt;bar&lt;/code&gt; is updated leaves &lt;em&gt;nothing to re-render &lt;code&gt;Grandchild&lt;/code&gt;,&lt;/em&gt; so this will result in unintended consequences: &lt;code&gt;Grandchild&lt;/code&gt; would only re-render when &lt;code&gt;foo&lt;/code&gt; is updated.&lt;/p&gt;

&lt;h1 id=&#34;after&#34;&gt;After&lt;/h1&gt;

&lt;p&gt;Using a combination of memoization and the Context API, we can prevent &lt;code&gt;Child&lt;/code&gt; from re-rendering unnecessarily. The following application demonstrates this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const BarContext = createContext(null);

function Parent(props) {
  const [foo, setFoo] = useState(0);
  const [bar, setBar] = useState(0);

  function incrementFoo() {
    setFoo((prev) =&amp;gt; prev + 1);
  }

  function incrementBar() {
    setBar((prev) =&amp;gt; prev + 1);
  }

  return (
    &amp;lt;BarContext.Provider value={bar}&amp;gt;
      &amp;lt;button onClick={incrementFoo}&amp;gt;Increment Foo&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={incrementBar}&amp;gt;Increment Bar&amp;lt;/button&amp;gt;
      &amp;lt;MemoizedChild foo={foo} /&amp;gt;
    &amp;lt;/BarContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Child(props) {
  const renders = useRef(0);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;Foo (in Child): {props.foo}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Child renders: {renders.current++}&amp;lt;/p&amp;gt;
      &amp;lt;Grandchild /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

const MemoizedChild = memo(Child);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Grandchild(props) {
  const renders = useRef(0);
  const bar = useContext(BarContext);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;p&amp;gt;Bar (in Grandchild): {bar}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Grandchild renders: {renders.current++}&amp;lt;/p&amp;gt;
    &amp;lt;/&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we made two updates. First, we used a piece of context to hold the reference to &lt;code&gt;bar&lt;/code&gt;, and we have &lt;code&gt;Grandchild&lt;/code&gt; subscribe to that piece of context using the &lt;code&gt;useContext&lt;/code&gt; hook. However, this is only half of the equation; if we do not memoize &lt;code&gt;Child&lt;/code&gt;, then anytime &lt;code&gt;bar&lt;/code&gt; is updated in &lt;code&gt;Parent&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;Child&lt;/code&gt; will re-render.&lt;/strong&gt; In order to prevent this, we use the &lt;a href=&#34;https://reactjs.org/docs/react-api.html#reactmemo&#34; target=&#34;_blank&#34;&gt;memo&lt;/a&gt; function to create a memoized version of the &lt;code&gt;Child&lt;/code&gt; component that will only re-render when the props change.&lt;/p&gt;

&lt;p&gt;And voila! We have successfully eliminated unnecessary messenger re-renders with the Context API and some simple memoization.&lt;/p&gt;

&lt;p&gt;I would be remiss not to say that for most applications, re-renders don&amp;rsquo;t cause much of a performance issue because most applications don&amp;rsquo;t involve a lot of front-end computation. However, for applications with a lot of animations or drag-and-drops, it&amp;rsquo;s more than worth it to eliminate unnecessary re-renders wherever you can. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redux Without Redux: How to Create Redux-like Functionality Using React</title>
      <link>https://dylandpowers.github.io/post/redux-without-redux-how-to-create-redux-like-functionality-using-react/</link>
      <pubDate>Tue, 02 Feb 2021 21:03:31 -0500</pubDate>
      <guid>https://dylandpowers.github.io/post/redux-without-redux-how-to-create-redux-like-functionality-using-react/</guid>
      <description>

&lt;p&gt;When it comes to frontend state management libraries, it doesn&amp;rsquo;t get much better than good ol&amp;rsquo; &lt;a href=&#34;https://redux.js.org/&#34; target=&#34;_blank&#34;&gt;Redux&lt;/a&gt;. It allows you to define one or more reducers, dispatch updates to a global state, and subscribe to only the parts of state that you care about in each a component.&lt;/p&gt;

&lt;p&gt;However, as I have continued to incorporate Redux into smaller personal projects, I have found some of its features to be superfluous to my needs. For example, for small projects that make use of Ajax, I sometimes prefer to separate the global state from the Ajax calls. This makes something like &lt;a href=&#34;https://github.com/reduxjs/redux-thunk&#34; target=&#34;_blank&#34;&gt;redux-thunk&lt;/a&gt; unnecessary, meaning that I would not make use of any Redux middleware (fun fact: the redux-thunk library is only &lt;a href=&#34;https://github.com/reduxjs/redux-thunk/blob/master/src/index.js&#34; target=&#34;_blank&#34;&gt;14 lines of source code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Fortunately, implementing a basic Redux is &lt;em&gt;much&lt;/em&gt; simpler than you might think! We just need a custom reducer and a couple of React hooks. This tutorial will show you how to create a simple global state, along with a dispatcher and a way to update that global state. We will be using functional components in this tutorial, and we will create a simple counter which can be incremented and decremented. Let&amp;rsquo;s get started!&lt;/p&gt;

&lt;h1 id=&#34;the-reducer&#34;&gt;The Reducer&lt;/h1&gt;

&lt;p&gt;For starters, a reducer is just a function which accepts a current state and an action and then based on that action, returns a new state. That&amp;rsquo;s it. However, without some active management, you would have to keep track of the current state and pass it to the reducer every time you wanted to dispatch an action.&lt;/p&gt;

&lt;p&gt;Fortunately, React already covers a lot of the ground for us with the &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html#usereducer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;useReducer&lt;/code&gt;&lt;/a&gt; hook. It accepts two arguments: a reducer and an initial state (it also optionally accepts a lazy state initialization function). The reducer must have the signature described above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function reducer(state, action) {
  return state; // some new state
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we&amp;rsquo;ll define our reducer in its own file. We will also define the action types for incrementing, decrementing, and setting the counter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// reducer.js
const INCREMENT = &#39;INCREMENT&#39;;
const DECREMENT = &#39;DECREMENT&#39;;
const SET_COUNT = &#39;SET_COUNT&#39;;

export default function counter(state, action) {
  switch (action.type) {
    case INCREMENT:
      return state + 1;
    case DECREMENT:
      return state - 1;
    case SET_COUNT:
      return action.count;
    default:
      throw new Error(`Action type ${action.type} not recognized`);
  }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll also want to make some &lt;em&gt;action creators,&lt;/em&gt; which simplify the process of constructing an action from outside of the scope of the reducer. Actions are just objects which have a &lt;code&gt;type&lt;/code&gt; property and, optionally, other properties. To avoid having to create the action object inside of a component, we define certain action creators in the reducer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// reducer.js
export function increment() {
  return {
    type: INCREMENT
  };
}

export function decrement() {
  return {
    type: DECREMENT
  };
}

export function setCount(count) {
  return {
    type: SET_COUNT,
    count
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the reducer done, we can now begin to make our Redux functionality using a couple useful hooks.&lt;/p&gt;

&lt;h1 id=&#34;incorporating-the-reducer&#34;&gt;Incorporating the Reducer&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hook returns a &lt;code&gt;dispatch&lt;/code&gt; function and a reference to the current state. The &lt;code&gt;dispatch&lt;/code&gt; function takes care of automatically passing in the current state to the reducer, although we still have to supply the action (this emulates Redux behavior).&lt;/p&gt;

&lt;p&gt;In our top-level component where we want the global state to live, we declare our &lt;code&gt;dispatch&lt;/code&gt; function and our global state using this hook:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// TopLevelComponent.jsx
import React, { useReducer } from &#39;react&#39;;
import reducer from &#39;./reducer&#39;;

export default function TopLevelComponent(props) {
  const [count, dispatch] = useReducer(reducer, 0);

  return (
    &amp;lt;p&amp;gt;The current count is {count}.&amp;lt;/p&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, any time an action is dispatched using the &lt;code&gt;dispatch&lt;/code&gt; function returned above, the global &lt;code&gt;count&lt;/code&gt; will be updated! Now this is beginning to look a little like Redux. However, if the &lt;code&gt;dispatch&lt;/code&gt; function were simply passed down through props, you might think that this looks like plain React: passing down callbacks to update state in a parent component. And you would be right. Using another hook, we can make this app even more Redux-like.&lt;/p&gt;

&lt;h1 id=&#34;making-dispatch-available-everywhere&#34;&gt;Making &lt;code&gt;dispatch&lt;/code&gt; Available Everywhere&lt;/h1&gt;

&lt;p&gt;To further emulate Redux, we should make the &lt;code&gt;dispatch&lt;/code&gt; function available from any child component without directly passing it down through props. In the parent component, we can provide a context whose value is the &lt;code&gt;dispatch&lt;/code&gt; function. In order to be able to access this context later, we will declare it in the reducer file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// reducer.js
import { createContext } from &#39;react&#39;;

export const CounterContext = createContext(null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in our top-level component, we will wrap all children in a context provider that will provide the &lt;code&gt;dispatch&lt;/code&gt; function to all child components:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// TopLevelComponent.jsx
import React, { useReducer } from &#39;react&#39;;
import reducer, { CounterContext } from &#39;./reducer&#39;;

export default function TopLevelComponent(props) {
  const [count, dispatch] = useReducer(reducer, 0);

  return (
    &amp;lt;CounterContext.Provider value={dispatch}&amp;gt;
      &amp;lt;p&amp;gt;The current count is {count}.&amp;lt;/p&amp;gt;
    &amp;lt;/CounterContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, any child component will have access to the &lt;code&gt;dispatch&lt;/code&gt; function, which they can use to update the &lt;code&gt;count&lt;/code&gt; state globally! If you wish to access &lt;code&gt;count&lt;/code&gt; in child components as well, it would be trivial to make another context to provide that value anywhere.&lt;/p&gt;

&lt;h1 id=&#34;dispatching-actions-from-child-components&#34;&gt;Dispatching Actions from Child Components&lt;/h1&gt;

&lt;p&gt;Now, for the pièce de résistance! By using the &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html#usecontext&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;useContext&lt;/code&gt;&lt;/a&gt; hook, we can access the value of the created context from any child component and &lt;code&gt;dispatch&lt;/code&gt; actions to the global state, just like Redux:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// ChildComponent.jsx
import React, { useContext } from &#39;react&#39;;
import { CounterContext, increment, decrement } from &#39;./reducer&#39;;

export default function ChildComponent(props) {
  const dispatch = useContext(CounterContext);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(increment())}&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(decrement())}&amp;gt;-&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, now we can access the &lt;code&gt;dispatch&lt;/code&gt; function from anywhere to dispatch actions to the global state without having to pass down callbacks as props.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As you can see, we have now covered all of our bases in terms of basic Redux functionality. We can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a reducer which updates a global state&lt;/li&gt;
&lt;li&gt;Dispatch actions to update that global state&lt;/li&gt;
&lt;li&gt;Access the &lt;code&gt;dispatch&lt;/code&gt; function from any child component&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For simple projects, this quasi-Redux implements a lot of the basic functionality without having to incorporate the whole library. Thanks for reading 😄!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
