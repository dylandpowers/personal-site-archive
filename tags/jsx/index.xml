<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSX | Dylan Powers</title>
    <link>https://dylandpowers.github.io/tags/jsx/</link>
      <atom:link href="https://dylandpowers.github.io/tags/jsx/index.xml" rel="self" type="application/rss+xml" />
    <description>JSX</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 08 Aug 2021 16:20:12 -0400</lastBuildDate>
    <image>
      <url>https://dylandpowers.github.io/img/icon-192.png</url>
      <title>JSX</title>
      <link>https://dylandpowers.github.io/tags/jsx/</link>
    </image>
    
    <item>
      <title>Essential NPM Packages for React Beginners</title>
      <link>https://dylandpowers.github.io/post/essential-npm-packages-for-react-beginners/</link>
      <pubDate>Sun, 08 Aug 2021 16:20:12 -0400</pubDate>
      <guid>https://dylandpowers.github.io/post/essential-npm-packages-for-react-beginners/</guid>
      <description>&lt;p&gt;When I was first starting out in React development, I had little to no knowledge about the ecosystem in general. Not knowing the necessary tools available in the ecosystem definitely led to increased time-to-completion for personal projects. In this post, I&amp;rsquo;ll discuss NPM packages that I use every day in my personal React projects which have sped up development time drastically, and are great for beginners.&lt;/p&gt;
&lt;h1 id=&#34;create-react-apphttpswwwnpmjscompackagecreate-react-app&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/create-react-app&#34;&gt;create-react-app&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This is the #1 package out there for bootstrapping React applications. It allows you to create scaffolds for React applications with a simple command: &lt;code&gt;create-react-app &amp;lt;project name&amp;gt;&lt;/code&gt;. This package is maintained by Facebook, so you can be sure that it will always contain the most recent optimizations.&lt;/p&gt;
&lt;h1 id=&#34;antdhttpswwwnpmjscompackageantd&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/antd&#34;&gt;antd&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;antd&lt;/code&gt; package, short for Ant Design, is a library of React components created by &lt;a href=&#34;https://www.antgroup.com/en&#34;&gt;Ant Financial&lt;/a&gt;. Creating UI components can be an extremely time consuming part of development, and self-created components don&amp;rsquo;t make for a great user experience if you don&amp;rsquo;t have great design skills (like myself).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;antd&lt;/code&gt; provides simple, out-of-the-box components for everything from lists to tables to rating systems. Everything is standardized which makes for a &lt;em&gt;great&lt;/em&gt; user experience, and you can even override the CSS variables using something like &lt;a href=&#34;https://www.npmjs.com/package/craco&#34;&gt;craco&lt;/a&gt;. I&amp;rsquo;ve made several websites with &lt;code&gt;antd&lt;/code&gt; components and I always have a great time using it.&lt;/p&gt;
&lt;h1 id=&#34;styled-componentshttpsstyled-componentscom&#34;&gt;&lt;a href=&#34;https://styled-components.com/&#34;&gt;styled-components&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a library for styling React components (or standard HTML elements) directly in your component file. By default, it exports a function &lt;code&gt;styled&lt;/code&gt; which accepts a React component as an argument and applies extra styling on top of it. For example, we can add extra styles to &lt;code&gt;antd&lt;/code&gt;&amp;rsquo;s &lt;code&gt;Button&lt;/code&gt; component like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;antd&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styled&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;styled-components&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PaddedButton&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styled&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  padding: 10px;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a short-hand for applying the styling on HTML elements where you can just use a &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styled&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;styled-components&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RedText&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styled&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  color: red;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I love &lt;code&gt;styled-components&lt;/code&gt; because I can style the components in the way I need without ever leaving the component file. In my opinion, the close coupling of component&amp;rsquo;s styles to their state management makes for a simpler development workflow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; be sure to always define your styled components &lt;em&gt;outside&lt;/em&gt; of the component that uses them, so that they aren&amp;rsquo;t re-computed on every render.&lt;/p&gt;
&lt;h1 id=&#34;react-router-domhttpsreactroutercom&#34;&gt;&lt;a href=&#34;https://reactrouter.com/&#34;&gt;react-router-dom&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This is simply the easiest and best routing package out there. It gives you a set of navigational components that you can use to declare different routes in your application like the main page, a &lt;code&gt;/login&lt;/code&gt; page, a &lt;code&gt;/profile&lt;/code&gt; page, etc. You declare your different routes with &lt;code&gt;Route&lt;/code&gt; components, and then designate which component they should render:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Route&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Switch&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-router-dom&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginPage&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./LoginPage&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Router&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Switch&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exact&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;LoginPage&lt;/span&gt;} /&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Switch&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Router&lt;/span&gt;&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve also written &lt;a href=&#34;https://dylanpowers.me/post/protected-routes-in-react/&#34;&gt;separate post&lt;/a&gt; on how to make protected routes using this package.&lt;/p&gt;
&lt;h1 id=&#34;firebasehttpswwwnpmjscompackagefirebase&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/firebase&#34;&gt;firebase&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Firebase is more just than a package - it provides tools for everything that basic applications need like authentication, storage, and much more. It provides a declarative and simple API that makes app development incredibly simple.&lt;/p&gt;
&lt;p&gt;To use this package, you&amp;rsquo;ll need to create a firebase account and project. After that, you can set up authentication as well as a real-time datastore or a collection-like datastore similar to &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;axioshttpswwwnpmjscompackageaxios&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/axios&#34;&gt;axios&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Axios is a simple HTTP client for making API requests from the browser. It&amp;rsquo;s also promise-based which means you can add success callbacks with ease.&lt;/p&gt;
&lt;h1 id=&#34;classnameshttpswwwnpmjscompackageclassnames&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/classnames&#34;&gt;classnames&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Classnames is an incredible simple yet extremely powerful library. It does one thing and it does it well - conditionally combining CSS class names based on a set of criteria. It exports a function which takes a single object argument where the keys are the class names and the values are booleans representing whether or not to apply the class name. Here&amp;rsquo;s a simple example where something should have the &lt;code&gt;highlighted&lt;/code&gt; class if a piece of state is &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;classNames&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;classnames&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;isHighlighted&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setIsHighlighted&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listItemClassName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;classNames&lt;/span&gt;({
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list-item&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;highlighted&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isHighlighted&lt;/span&gt;
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;With these packages, you can supercharge your React development. Go out and develop!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Context to Prevent Unnecessary Re Renders</title>
      <link>https://dylandpowers.github.io/post/using-context-to-prevent-unnecessary-re-renders/</link>
      <pubDate>Sun, 09 May 2021 22:49:47 -0400</pubDate>
      <guid>https://dylandpowers.github.io/post/using-context-to-prevent-unnecessary-re-renders/</guid>
      <description>&lt;p&gt;With the rising popularity of React, we are in an era of the most responsive user interfaces we have ever seen. React uses a virtual DOM, and for every render it runs calculations to determine which parts of the actual DOM need to get updated. This means that React &lt;em&gt;only re-renders&lt;/em&gt; components that need to be re-rendered, and nothing more.&lt;/p&gt;
&lt;p&gt;However, that doesn&amp;rsquo;t mean we shouldn&amp;rsquo;t introduce optimizations of our own! Too many re-renders can lead to performance issues, so we should optimize wherever we can. One common pitfall I see in React applications is what I call &lt;em&gt;messenger components&lt;/em&gt;, which are components that pass some props from a parent to a child, but do not actually do anything with those props. For example, consider the following three components.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ction&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Child&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;} /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Grandchild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this situation, &lt;code&gt;Child&lt;/code&gt; receives both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; as props, but only truly &amp;ldquo;cares&amp;rdquo; about the value of &lt;code&gt;foo&lt;/code&gt;; &lt;code&gt;Grandchild&lt;/code&gt; cares about the value of &lt;code&gt;bar&lt;/code&gt;. In this case, &lt;code&gt;Child&lt;/code&gt; is a messenger component for the &lt;code&gt;bar&lt;/code&gt; prop. &lt;code&gt;Child&lt;/code&gt; should only re-render when the value of &lt;code&gt;foo&lt;/code&gt; updates, but in this case it will also re-render when &lt;code&gt;bar&lt;/code&gt; updates. How can we fix this?&lt;/p&gt;
&lt;h1 id=&#34;the-context-api&#34;&gt;The Context API&lt;/h1&gt;
&lt;p&gt;Using React&amp;rsquo;s &lt;a href=&#34;https://reactjs.org/docs/context.html&#34;&gt;Context API&lt;/a&gt;, we can broadcast changes to values, and only components that directly subscribe to that piece of context will receive the new value. This solves the problem of messenger components re-rendering unnecessarily, because we no longer need to pass props down - we can simply directly subscribe to the value in &lt;code&gt;Grandchild&lt;/code&gt;. To demonstrate this, I will add &lt;a href=&#34;https://reactjs.org/docs/glossary.html#refs&#34;&gt;refs&lt;/a&gt; to show the number of re-renders for each component before and after adding context.&lt;/p&gt;
&lt;h1 id=&#34;before&#34;&gt;Before&lt;/h1&gt;
&lt;p&gt;Using the current system of prop drilling, we can see how &lt;code&gt;Child&lt;/code&gt; will re-render every time either prop is updated. If you like, use &lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;create-react-app&lt;/a&gt; to bootstrap an app to see the renders in action.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setFoo&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setBar&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementFoo&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setFoo&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementBar&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setBar&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;incrementFoo&lt;/span&gt;}&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Increment&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;incrementBar&lt;/span&gt;}&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Increment&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Child&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useRef&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Grandchild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useRef&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this application, you will notice that the number of renders for the &lt;code&gt;Child&lt;/code&gt; and &lt;code&gt;Grandchild&lt;/code&gt; components will always be the same. However, since &lt;code&gt;Child&lt;/code&gt; doesn&amp;rsquo;t need to update when &lt;code&gt;bar&lt;/code&gt; updates, the number of re-renders shouldn&amp;rsquo;t be the same for the two components.&lt;/p&gt;
&lt;p&gt;But wait, why don&amp;rsquo;t we just memoize &lt;code&gt;Child&lt;/code&gt; so that it only re-renders when &lt;code&gt;foo&lt;/code&gt; updates? Beware of this approach, because it is only half of the solution! Memoizing &lt;code&gt;Child&lt;/code&gt; to not re-render when &lt;code&gt;bar&lt;/code&gt; is updated leaves &lt;em&gt;nothing to re-render &lt;code&gt;Grandchild&lt;/code&gt;,&lt;/em&gt; so this will result in unintended consequences: &lt;code&gt;Grandchild&lt;/code&gt; would only re-render when &lt;code&gt;foo&lt;/code&gt; is updated.&lt;/p&gt;
&lt;h1 id=&#34;after&#34;&gt;After&lt;/h1&gt;
&lt;p&gt;Using a combination of memoization and the Context API, we can prevent &lt;code&gt;Child&lt;/code&gt; from re-rendering unnecessarily. The following application demonstrates this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BarContext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createContext&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setFoo&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setBar&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementFoo&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setFoo&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementBar&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setBar&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;BarContext.Provider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;}&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;incrementFoo&lt;/span&gt;}&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Increment&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;incrementBar&lt;/span&gt;}&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Increment&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;MemoizedChild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;} /&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;BarContext.Provider&lt;/span&gt;&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useRef&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Grandchild&lt;/span&gt; /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MemoizedChild&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useRef&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useContext&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BarContext&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Bar&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Grandchild&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;renders&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;/&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, we made two updates. First, we used a piece of context to hold the reference to &lt;code&gt;bar&lt;/code&gt;, and we have &lt;code&gt;Grandchild&lt;/code&gt; subscribe to that piece of context using the &lt;code&gt;useContext&lt;/code&gt; hook. However, this is only half of the equation; if we do not memoize &lt;code&gt;Child&lt;/code&gt;, then anytime &lt;code&gt;bar&lt;/code&gt; is updated in &lt;code&gt;Parent&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;Child&lt;/code&gt; will re-render.&lt;/strong&gt; In order to prevent this, we use the &lt;a href=&#34;https://reactjs.org/docs/react-api.html#reactmemo&#34;&gt;memo&lt;/a&gt; function to create a memoized version of the &lt;code&gt;Child&lt;/code&gt; component that will only re-render when the props change.&lt;/p&gt;
&lt;p&gt;And voila! We have successfully eliminated unnecessary messenger re-renders with the Context API and some simple memoization.&lt;/p&gt;
&lt;p&gt;I would be remiss not to say that for most applications, re-renders don&amp;rsquo;t cause much of a performance issue because most applications don&amp;rsquo;t involve a lot of front-end computation. However, for applications with a lot of animations or drag-and-drops, it&amp;rsquo;s more than worth it to eliminate unnecessary re-renders wherever you can. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Protected Routes in React using React-Router-Dom</title>
      <link>https://dylandpowers.github.io/post/protected-routes-in-react/</link>
      <pubDate>Tue, 08 Sep 2020 10:49:45 -0400</pubDate>
      <guid>https://dylandpowers.github.io/post/protected-routes-in-react/</guid>
      <description>&lt;p&gt;If you have ever made a modern single-page web app using React, odds are you used &lt;a href=&#34;https://reactrouter.com/&#34;&gt;react-router-dom&lt;/a&gt; for client-side routing. In this tutorial, I will demonstrate how to protect routes such that only logged-in users can navigate to certain places. For example, you don&amp;rsquo;t want every user to be able to navigate to &lt;code&gt;/dashboard&lt;/code&gt;, but anybody should be able to hit &lt;code&gt;/login&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This tutorial assumes that you have basic familiarity with react-router-dom and how to set up a basic router. If not, please read its &lt;a href=&#34;https://reactrouter.com/web/guides/quick-start&#34;&gt;quick start page&lt;/a&gt; before moving on. This article also assumes that you have a simple way to determine if a user is logged in or not, whether that be through &lt;a href=&#34;https://jwt.io/&#34;&gt;JSON web tokens&lt;/a&gt;, &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt;, or something else.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;A traditional React router without protected routes might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;BrowserRouter&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Switch&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Route&lt;/span&gt;
} &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-router-dom&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginPage&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./components/LoginPage&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardPage&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./components/DashboardPage&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;BrowserRouter&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Switch&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;LoginPage&lt;/span&gt;} /&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dashboard&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardPage&lt;/span&gt;} /&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardPage&lt;/span&gt;} /&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Switch&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;BrowserRouter&lt;/span&gt;&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is an issue with this setup; if a user tries to navigate to &lt;code&gt;/dashboard&lt;/code&gt;, they &lt;strong&gt;will&lt;/strong&gt; be able to do so without logging in. Especially if the dashboard contains sensitive information, this is dangerous behavior. To remedy this, we will be replacing the &lt;code&gt;Route&lt;/code&gt; components with references to our new &lt;code&gt;ProtectedRoute&lt;/code&gt; components, which will redirect to a different page (in our case, &lt;code&gt;/login&lt;/code&gt;) if the user is not logged in.&lt;/p&gt;
&lt;h1 id=&#34;creating-the-component&#34;&gt;Creating the Component&lt;/h1&gt;
&lt;p&gt;First, we will create the &lt;code&gt;ProtectedRoute&lt;/code&gt; component. In this tutorial I will be using a functional component, but class-based components work as well. Create a new file &lt;code&gt;ProtectedRoute.js&lt;/code&gt; and place the following inside of it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtectedRoute&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; }) { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that our &lt;code&gt;ProtectedRoute&lt;/code&gt; will expect a &lt;code&gt;component&lt;/code&gt; prop, much like how &lt;code&gt;Route&lt;/code&gt; from react-router-dom takes a &lt;code&gt;component&lt;/code&gt; prop. The &lt;code&gt;...rest&lt;/code&gt; part refers to the rest of the props that can be passed to &lt;code&gt;ProtectedRoute&lt;/code&gt; besides the &lt;code&gt;component&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;importing-auth-logic&#34;&gt;Importing Auth Logic&lt;/h1&gt;
&lt;p&gt;Next, we need to import auth logic into this module to determine whether or not the user is logged in. As I mentioned earlier, I use JSON web tokens, but as long as you have a function that returns a boolean indicating whether or not the user is logged in, everything will work great. At this point, our file will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;isAuthenticated&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../auth/jwt&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtectedRoute&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; }) { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;protecting-the-route&#34;&gt;Protecting the Route&lt;/h1&gt;
&lt;p&gt;These next 5 lines of code are where the real magic happens. We will be using react-router-dom&amp;rsquo;s &lt;a href=&#34;https://reactrouter.com/web/api/Redirect&#34;&gt;Redirect&lt;/a&gt; component to redirect to a universally accessible page if the user is not logged in. Otherwise, we will return its &lt;a href=&#34;https://reactrouter.com/web/api/Route&#34;&gt;Route&lt;/a&gt; component, which is what you see in a regular React router.&lt;/p&gt;
&lt;p&gt;We will pass the &lt;code&gt;...rest&lt;/code&gt; parameter to the &lt;code&gt;Route&lt;/code&gt; component, which means that everything that we pass to &lt;code&gt;ProtectedRoute&lt;/code&gt; (except for the &lt;code&gt;component&lt;/code&gt; prop) will then be passed to the &lt;code&gt;Route&lt;/code&gt; component. We will take advantage of &lt;code&gt;Route&lt;/code&gt;&amp;rsquo;s &lt;code&gt;render&lt;/code&gt; prop to make it render the component passed in to our protected route:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...rest&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) =&amp;gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Component&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...props&lt;/span&gt;} /&amp;gt;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course, we will only return this route if the user is logged in. If not, we will return a &lt;code&gt;Redirect&lt;/code&gt; to the login page. After adding the logic and the imports in the file, it should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Redirect&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Route&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-router-dom&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtectedRoute&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; }) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isAuthenticated&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...rest&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{(&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) =&amp;gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Component&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;...props&lt;/span&gt;} /&amp;gt;} /&amp;gt;
  ) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Redirect&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt; /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, if you do not want to &lt;em&gt;always&lt;/em&gt; redirect to the login page, consider adding adding a prop like &lt;code&gt;redirectRoute&lt;/code&gt; to the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtectedRoute&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;redirectRoute&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;rest&lt;/span&gt; }) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then the redirect component would read &lt;code&gt;&amp;lt;Redirect to={redirectRoute} /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;putting-it-all-together&#34;&gt;Putting it All Together&lt;/h1&gt;
&lt;p&gt;Now, anytime we want to protect a route, we can use our &lt;code&gt;ProtectedRoute&lt;/code&gt; component instead of the provided &lt;code&gt;Route&lt;/code&gt; component. As a result, the router shown in the overview would now look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;BrowserRouter&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Switch&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Route&lt;/span&gt;
} &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react-router-dom&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginPage&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./components/LoginPage&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardPage&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./components/DashboardPage&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProtectedRoute&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./utils/ProtectedRoute&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Router&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;BrowserRouter&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Switch&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;LoginPage&lt;/span&gt;} /&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ProtectedRoute&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dashboard&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardPage&lt;/span&gt;} /&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ProtectedRoute&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardPage&lt;/span&gt;} /&amp;gt;
      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Switch&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;BrowserRouter&lt;/span&gt;&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Voilà! You now have the ability to make protected routes in React. Go protect those web apps!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
